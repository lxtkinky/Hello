野指针：堆区的内存被释放，指向堆区的栈指针没有被释放，再次调用这个栈指针就会产生野指针
内存泄漏：指向堆区的栈指针被释放了，堆区的内存空间没有释放，这块内存区域会一直存在无法释放，且无法使用

栈：是向低地址扩展的内存空间
堆：是向高地址扩展的内存空间

x/100xb array 打印100个字节内存地址 从array开始
po array 打印array

class_copyIvarList
再c 里面 copy new create 再堆区域里面开辟空间，在
create new copy 默认都会开辟堆空间（都会调用malloc）

CFRunloopRef *observer = 初始化;
free(observer);
CFRelease(observer);  的区别
observer 里面有可能存放了其他堆内存的指针，如果用free(observer) 会直接释放observer所指向的堆内存，而不会释放observer堆内存中保存的指针所指向的堆内存

clang -rewriete-objc  main.m

sel_registerName("viewDidLoad")

xcode->Debug->DebugWorkflow->Always Shwo Disassembly 在断点处查看汇编代码

如何统计启动时间：scheme->edit scheme ->environment variables里面添加一个环境变量DYLD_PRINT_STATISTICS 设为1
开启僵尸对象检测：scheme->edit scheme ->diagnostic->Zombie Objects

检测内存泄露
1、静态检测
2、动态检测,instruments
3、析构方法打印dealloc方法有没有打印
4、第三方内存检测工具（）

------------------------------------复习笔记------------------------------------

RAC是面向信号的响应式编程
RAC的底层实现，首先创建一个信号RACSubject对象，对象有一个属性是数组类型
然后是订阅信号，这里会创建一个订阅者，订阅者保存了我们的block
然后再把订阅者保存到RACSubject的订阅者数组中
当发送信号时，会遍历订阅者数组，执行订阅者的block

|-Block

self.block = ^{
[self sendMsg];
或者
_property = [NSObject new];//隐式持有

}
|-SDWebImage有五大模块
使用category对常用的view进行扩展，方便我们使用，
manager联合下载和缓存起协调作用
cache缓存模块
download下载模块
perfetch下载一组图片
调用category的sd_setImageWithURL方法会创建一个UIImageView对象，然后再调用sd_internalSetImageWithURL()方法，这里会创建以个UIView对象，然后调用loadImageWithURL()，会创建一个SDWebImageManager对象，manager调用queryDiskCache方法查找磁盘缓存，这里会创建一个SDImageCache对象并返回图片数据，如果没有缓存就去下载，这里会创建一个SDWebImageDownloader对象，并由它去下载图片，下载完成后返回图片数据同时对图片进行缓存

|-Weak的底层实现
weak声明的变量释放后，自动赋值为nil
assign声明的变量释放后不会自动赋值为nil，会造成野指针错误
系统维护了一个容器来保存weak有关的数据。这里会采用原对象的指针作为key，weak对象的指针集合为value，所以这个容器应该是一个字典。value是一个集合，所以这里应该是一个数组
1、初始化时：runtime会调用objc_initWeak函数，初始化一个新的weak指针指向对象的地址
2、添加引用时：objc_initWeak函数会调用objc_storeWeak函数，objc_storeWeak函数的作用是更新指针对象，创建对应的弱引用表
3、释放时，调用clearDeallocating函数，clearDeallocating函数首先根据对象的地址获取所有weak指针地址的数组，遍历这个数组把其中的数据设置为nil，最后把这个entry从weak表中删除，最后清理对象的记录。

|-NSOperation
当挂起队列的时候，正在执行的操作是不会受影响的。
依赖
线程间通信

|-网络传输
HTTPS

|-RunLoop
循环会不会造成内存溢出
递归会不会造成溢出
递归和循环的区别：函数自己调用自己叫递归，函数调用需要划分一块栈区域，
RunLoop不能通过alloc init 方法创建
NSRunLoopCommonModes占位模式相当于UI模式和默认模式
初始化模式
内核模式
NSDefaultRunLoopMode
UITrackingRunLoopMode
RunLoop机制包含Source、Observer、Timer
默认模式：
UI模式：模式优先级最高，只能被触摸事件触发
没有开启RunLoop的Thread赋值给属性，只能保住OC对象，线程是由CPU调度的，是无法保持的
让线程有执行不完的任务，线程就不会释放了
线程上面的NSRunLoop默认是不循环的，要调用run方法
[[NSRunLoop currentRunLoop] run] 直接调用NSRunLoop的run方法之后这个线程永远都不会死掉
while（！_isFinished）{
[[NSRunLoop currentRunLoop]  runUntilDate:[NSDate dateWithTimeIntervalSinceNow:0.0001]];
}
在外部控制_isFinished的值来改变线程的生命周期

或者在线程里面调用[NSThread exit]退出线程
主线程也是可以退掉的
UI操作是线程不安全的，在子线程里面更新UI也是可以的，但是如果出现资源抢夺程序就会崩掉
线程间的通讯必须要用到RunLoop机制，直接在线程里面写一个死循环是不能保证线程从事件队列里面取事件

|-Runtime机制
动态方法解析阶段
OC方法调用的本质就是调用objc_msgSend方法，这个方法必须有两个参数，一个是方法的调用者，一个是调用的具体方法，一个selector类型的参数，后面可以跟多个可选的额参数，这些参数就是方法的实际参数.
如果这个方法没有实现，通过动态方法绑定+(void)resoveInstanceMethod:(SEL)sel可以动态的绑定一个方法。
如果动态方法绑定也没有处理，则通过消息重定向- (id)forwardingTargetForSelector:(SEL)aSelector，在这里可以返回一个可以响应该消息的对象
然后进入方法签名- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector
拿到方法签名后派发消息，- (void)forwardInvocation:(NSInvocation *)anInvocation
- (void)forwardInvocation:(NSInvocation *)anInvocation{
//取得消息
    SEL selector = anInvocation.selector;

    //转发消息
    id *objcect = [Class new];
    if ([objcect respondsToSelector:selector]) {
        [anInvocation invocateWithTarget:objcect];
    }
    else{
    //如果没有转发则报错
        [super forwardInvocation:anInvocation];
    }
}
如果没有派发消息则进入- (void)doesNotRecognizeSelector:(SEL)aSelector，错误处理方法


|-KVO，通过添加观察者并实现回调方法，在观察到对象属性的变化时通知观察者执行回调方法
KVO的触发分为自动和手动模式，默认是自动模式
//默认YES自动触发，返回NO手动触发
//+ (BOOL)automaticallyNotifiesObserversForKey:(NSString *)key
在修改person属性的时候通过下面的方法手动通知
[person willChangeValueForKey:@"name"];
person.name = 20;
[person didChangeValueForKey:@"name"];
可以添加一个依赖属性，可以返回一个keypaths的集合，当集合中的key的值变化时都会观察到
+ (NSSet<NSString *> *)keyPathsForValuesAffectingValueForKey:(NSString *)key
KVO底层实现，使用runtime机制动态添加一个子类并设置方法和回调
1、添加一个子类，修改调用者的类型，把要观察的对象类型修改成子类类型
2、重写子类的setter方法
3、绑定observer 在setter方法中调用observer方法


|-KVC
//返回NO 通过KVC访问属性会直接报错
+ (BOOL)accessInstanceVariablesDirectly{return YES;}
KVC valueForKeypath:keypath 可以对象关联对象的属性：model.dog.age 获取对象的dog属性的age属性
KVC valueForKey:key  首先会调用accessInstanceVariablesDirectly
1、首先调用getter方法,getKey-->key-->isKey-->_getKey-->_key
2、如果没有相关方法会去找countOfKey 和 objectInNameAtIndex:index方法 这两个方法会返回一个NSKeyValueArray数组对象
3、如果上述方法都没有，看+ (BOOL)accessInstanceVariablesDirectly 返回值
如果为YES，找成员变量，_key-->_isKey-->key-->isKey
如果为NO，报错
4、还可以实现valueForUndefinedKey 返回nil 这样就不会报错

KVC setValue:value forKey:key 查找相关的setter方法
setter方法顺序：setKey-->_setKey-->setIsKey
如果属性的类型为基本数据类型，赋值的时候传递的是nil对象则会报错，可以实现setNilValueForKey:key 方法处理错误


KVC的集合运算符@count @max @min @avg
[array valeuForKey:@"count"]会报错
[array valeuForKey:@"@count"]可以获取获取到集合的长度
[array valueForKey@"@max.age"]获取集合中对象age最大的值



|-SDWebImage

|-网络传输数据加密,对称加密和非对称加密
对称加密：加密和解密都是用的同样的秘钥，对称加密的一大缺点是密钥的管理与分配，换句话说，如何把密钥发送到需要解密你的消息的人的手里是一个问题。在发送密钥的过程中，密钥有很大的风险会被黑客们拦截。现实中通常的做法是将对称加密的密钥进行非对称加密，然后传送给需要它的人。
非对称加密：最常用的RSA加密算法。使用了一对秘钥，公钥和私钥。私钥只能由一方保管，而公钥则可以发送给任何请求人。非对称加密使用这一对秘钥的其中一个进行加密，而解密用另外一个。
可以采用MD5加密，简单的MD5加密可以通过碰撞检测破解，所以单纯的使用MD5加密，安全性非常差。
我们可以采用加盐（把要传输的数据MD5加密后在加上自定义一长串字符串再进行MD5加密）的方式增加复杂度，这样通过碰撞检测就不容易破解（如果盐被泄露了，这种加密方式就不安全了，所以这种方式存在很大的安全隐患）
我们可以在这种方式的基础上再增加复杂度。盐不写在应用程序里面，通过服务器分配，在注册的时候为没一位用户分配一个随机盐，这样即使盐泄露了也只是一个用户的数据不安全，不会造成批量用户的数据安全（但是这个还是存在一个问题，就是通过抓包软件，截取网络传输数据，模拟客户端请求）
我们可以通过增加时间戳的方式提高系统的安全性，在盐的基础上在加上一个时间戳（精确到分钟），服务器验证的时候验证服务器的当前时间和上一分钟，如果验证都失败了则认为验证失败。

|-Socket
nc -l 9999 监听本机9999端口
nc 127.0.0.1 9999 连接127.0.0.1的9999端口
完成连接之后就可以发送数据了

服务器端
创建一个socket
创建一个socket地址
将socket地址进行绑定
监听一个端口
接收客户端数据

客户端
创建一个socket
创建一个socket地址
将socket地址进行绑定
连接服务器端
向服务器发送数据

NSStrig，是一个只读对象，它不应该被修改，NSMutableString是NSString的子类对象，NSMutableString是可以赋值给NSString的，如果使用strong，并且把NSMutableString赋值给它，修改NSMutableString对象会导致NSString对象也被修改（NSString和NSMutableString指向同一块内存地址），这是不应该出现的,使用copy就不会出现这个问题.


------------------------------------复习笔记------------------------------------

--------------------------------问题-----------------------------------
1、MVVM更新collectionview时cell里面没有数据,约束问题导致view被撑到父view外面去了
--------------------------------问题-----------------------------------



